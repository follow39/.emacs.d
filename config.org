#+TITLE: My Emacs Config
#+AUTHOR: Artem Ivanov
#+DESCRIPTION: Personal Emacs config


* TABLE OF CONTENTS :TOC:
- [[#package-management][PACKAGE MANAGEMENT]]
  - [[#installing-use-package][Installing use-package]]
  - [[#setup-packageel-to-work-with-melpa][Setup package.el to work with MELPA.]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
  - [[#basic-keybindings][Basic keybindings]]
  - [[#org-mode-keybindings][Org mode keybindings]]
  - [[#files-keybindings][Files keybindings]]
  - [[#windows-keybindings][Windows keybindings]]
  - [[#buffers-and-bookmarks][Buffers and bookmarks]]
  - [[#registers-keybindings][Registers keybindings]]
  - [[#ehell-bindings][Ehell bindings]]
- [[#dashboard][DASHBOARD]]
- [[#evil-mode][EVIL MODE]]
- [[#fonts][FONTS]]
- [[#gui-settings][GUI SETTINGS]]
  - [[#start-maximazed][Start maximazed]]
  - [[#disable-toobar-and-scrollbar][Disable toobar and scrollbar]]
  - [[#display-number-lines-and-truncated-lines][Display number lines and truncated lines]]
  - [[#mode-line][MODE LINE]]
  - [[#icons][ICONS]]
  - [[#theme][THEME]]
- [[#which-key][WHICH KEY]]
- [[#undo-tree][UNDO TREE]]
- [[#lsp-mode][LSP MODE]]
- [[#rust][RUST]]
- [[#llvm][LLVM]]
- [[#company][COMPANY]]
- [[#flycheck][FLYCHECK]]
- [[#projectile][PROJECTILE]]
- [[#vertico][VERTICO]]
- [[#eshell][ESHELL]]
- [[#org-mode][ORG MODE]]
  - [[#basic][Basic]]
  - [[#table-of-content][Table of content]]
- [[#startup-performance][STARTUP PERFORMANCE]]
  - [[#garbage-collection][Garbage collection]]
  - [[#native-compile][Native compile]]
- [[#scrolling][SCROLLING]]

* PACKAGE MANAGEMENT
** Installing use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

** Setup package.el to work with MELPA.
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             ;;'("tromey" . "http://tromey.com/elpa/")
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src

* GENERAL KEYBINDINGS
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
#+end_src

** Basic keybindings
#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC"
     "SPC"   '(counsel-M-x :which-key "M-x")
     "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
     "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
     )
#+end_src

** Org mode keybindings
#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC"
     "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
     "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
     "m ."   '(counsel-org-goto :which-key "Counsel org goto")
     "m e"   '(org-export-dispatch :which-key "Org export dispatch")
     "m f"   '(org-footnote-new :which-key "Org footnote new")
     "m h"   '(org-toggle-heading :which-key "Org toggle heading")
     "m i"   '(org-toggle-item :which-key "Org toggle item")
     "m n"   '(org-store-link :which-key "Org store link")
     "m o"   '(org-set-property :which-key "Org set property")
     "m t"   '(org-todo :which-key "Org todo")
     "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
     "m B"   '(org-babel-tangle :which-key "Org babel tangle")
     "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
     "m T"   '(org-todo-list :which-key "Org todo list")
     "o a"   '(org-agenda :which-key "Org agenda")
     )
#+end_src

** Files keybindings
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
     "."     '(find-file :which-key "Find file")
     "f f"   '(find-file :which-key "Find file")
     "f r"   '(counsel-recentf :which-key "Recent files")
     "f s"   '(save-buffer :which-key "Save file")
     "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
     "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
     "f C"   '(copy-file :which-key "Copy file")
     "f D"   '(delete-file :which-key "Delete file")
     "f R"   '(rename-file :which-key "Rename file")
     "f S"   '(write-file :which-key "Save file as...")
     "f U"   '(sudo-edit :which-key "Sudo edit file")
)
#+end_src

** Windows keybindings
#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
     ;; Window splits
     "w c"   '(evil-window-delete :which-key "Close window")
     "w n"   '(evil-window-new :which-key "New window")
     "w s"   '(evil-window-split :which-key "Horizontal split window")
     "w v"   '(evil-window-vsplit :which-key "Vertical split window")
     ;; Window motions
     "w h"   '(evil-window-left :which-key "Window left")
     "w j"   '(evil-window-down :which-key "Window down")
     "w k"   '(evil-window-up :which-key "Window up")
     "w l"   '(evil-window-right :which-key "Window right")
     "w w"   '(evil-window-next :which-key "Goto next window")
     ;; winner mode
     "w <left>"  '(winner-undo :which-key "Winner undo")
     "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

** Buffers and bookmarks
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src


** Registers keybindings
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "r c"   '(copy-to-register :which-key "Copy to register")
       "r f"   '(frameset-to-register :which-key "Frameset to register")
       "r i"   '(insert-register :which-key "Insert register")
       "r j"   '(jump-to-register :which-key "Jump to register")
       "r l"   '(list-registers :which-key "List registers")
       "r n"   '(number-to-register :which-key "Number to register")
       "r r"   '(counsel-register :which-key "Choose a register")
       "r v"   '(view-register :which-key "View a register")
       "r w"   '(window-configuration-to-register :which-key "Window configuration to register")
       "r +"   '(increment-register :which-key "Increment register")
       "r SPC" '(point-to-register :which-key "Point to register"))
#+end_src

** Ehell bindings
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "e h"   '(counsel-esh-history :which-key "Eshell history")
       "e e"   '(eshell :which-key "Eshell"))
#+end_src

* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init      ;; tweak dashboard config before loading it
  ;;(setq dashboard-set-heading-icons t)
  ;;(setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
			  (agenda . 5 )
			  (bookmarks . 3)
			  (projects . 3)
			  (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  ;;(dashboard-modify-heading-icons '((recents . "file-text")
  ;;                                  (bookmarks . "book"))))
)
#+end_src


* EVIL MODE
#+begin_src emacs-lisp
(use-package evil
  :ensure t  ;; install evil if not installed
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init)
)
#+end_src


* FONTS
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "Inconsolata"
  :height 120
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu Nerd Font"
  :height 170
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Inconsolata"
  :height 150
  :weight'medium)
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Inconsolata"))
#+end_src


* GUI SETTINGS
** Start maximazed
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** Disable toobar and scrollbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display number lines and truncated lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** MODE LINE
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

** ICONS
#+begin_src emacs-lisp
  ;;(use-package all-the-icons
  ;;  :if (display-graphic-p))
#+end_src

** THEME
#+begin_src emacs-lisp
(use-package doom-themes
    :ensure t)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(load-theme 'doom-one t)
#+end_src


* WHICH KEY
#+begin_src emacs-lisp
(use-package which-key
    :ensure t)
(which-key-mode)
#+end_src


* UNDO TREE
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
#+end_src


* LSP MODE
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))
#+end_src


* RUST
#+begin_src emacs-lisp
(use-package rustic
  :ensure
  :bind (:map rustic-mode-map
	      ("M-j" . lsp-ui-imenu)
	      ("M-?" . lsp-find-references)
	      ("C-c C-c l" . flycheck-list-errors)
	      ("C-c C-c a" . lsp-execute-code-action)
	      ("C-c C-c r" . lsp-rename)
	      ("C-c C-c q" . lsp-workspace-restart)
	      ("C-c C-c Q" . lsp-workspace-shutdown)
	      ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))
#+end_src


* LLVM
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure
  :init (exec-path-from-shell-initialize))

(when (executable-find "lldb-mi")
  (use-package dap-mode
    :ensure
    :config
    (dap-ui-mode)
    (dap-ui-controls-mode 1)

    (require 'dap-lldb)
    (require 'dap-gdb-lldb)
    ;; installs .extension/vscode
    (dap-gdb-lldb-setup)
    (dap-register-debug-template
     "Rust::LLDB Run Configuration"
     (list :type "lldb"
	   :request "launch"
	   :name "LLDB::Run"
	   :gdbpath "rust-lldb"
	   ;; uncomment if lldb-mi is not in PATH
	   ;; :lldbmipath "/usr/local/bin/lldb-mi"
	   ))))
#+end_src
	 

* COMPANY
#+begin_src emacs-lisp
(use-package company
  :ensure
  :custom
  (company-idle-delay 0.5) ;; how long to wait until popup
  ;; (company-begin-commands nil) ;; uncomment to disable popup
  :bind
  (:map company-active-map
	      ("C-n". company-select-next)
	      ("C-p". company-select-previous)
	      ("M-<". company-select-first)
	      ("M->". company-select-last)))

(use-package yasnippet
  :ensure
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src


* FLYCHECK
#+begin_src emacs-lisp
(use-package flycheck :ensure)
#+end_src


* PROJECTILE
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  ;;(projectile-mode +1)
  ;;:bind (:map projectile-mode-map
  ;;            ("s-p" . projectile-command-map)
  ;;            ("C-c p" . projectile-command-map))
  (setq projectile-project-search-path '("~/Documents/projects/" . 1))
)
#+end_src


* VERTICO
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src


* ESHELL
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :ensure t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src


* ORG MODE
** Basic
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Org/"
      org-agenda-files '("~/Org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-log-done 'time
      org-journal-dir "~/Org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+end_src

** Table of content
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src


* STARTUP PERFORMANCE
** Garbage collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :ensure t
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

** Native compile
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src


* SCROLLING
#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
#+end_src
